[{"course_id":"004360","subject":"CS","catalog_number":"100","title":"Introduction to Computing through Applications","units":0.5,"description":"Using personal computers as effective problem solving tools for the present and the future. Effective use of spreadsheets to process, manipulate, and visualize numeric and textual information. Introduction to the Internet, World Wide Web, HTML, and XML. Algorithms underlying the functional components of web search engines and their influence on data access. Using wikis to publish, reshape, and organize data collaboratively. [Offered: F,W,S]","academic_level":"undergraduate"},{"course_id":"015054","subject":"CS","catalog_number":"105","title":"Introduction to Computer Programming 1","units":0.5,"description":"An introduction to the fundamentals of computer programming through media computation. Students will learn to write interactive graphical programs. Fundamental language concepts such as variables, conditionals, loops, functions, and arrays. Programming concepts such as coding style, modular design, testing, and debugging. Media concepts such as 2D graphics drawing, input, animation, and image processing. [Offered: F]","academic_level":"undergraduate"},{"course_id":"015055","subject":"CS","catalog_number":"106","title":"Introduction to Computer Programming 2","units":0.5,"description":"A continuation of the introduction to computer programming begun in CS 105. The use of programming, in conjunction with libraries, as a means of solving practical problems in art, design, and data processing. Basic text processing, manipulation of images and sound, handling and visualization of tabular and hierarchical data. Introductions to user interfaces, physical simulation, and object-oriented programming. [Offered: W]","academic_level":"undergraduate"},{"course_id":"012765","subject":"CS","catalog_number":"115","title":"Introduction to Computer Science 1","units":0.5,"description":"An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Function definition and application. Tracing via substitution. Design, testing, and documentation. Recursive data definitions. Lists and trees. Functional and data abstraction.","academic_level":"undergraduate"},{"course_id":"012766","subject":"CS","catalog_number":"116","title":"Introduction to Computer Science 2","units":0.5,"description":"This course builds on the techniques and patterns learned in CS 115 while making the transition to use of an imperative language. Generative and structural recursion. Mutation (assignment) and its role in an imperative language. Primitive types and basic I\/O. Sequencing, selection, looping. Function definition and use. File and console I\/O. Issues in computer science. [Offered: F,W,S]","academic_level":"undergraduate"},{"course_id":"012040","subject":"CS","catalog_number":"135","title":"Designing Functional Programs","units":0.5,"description":"An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Syntax and semantics of a functional programming language. Tracing via substitution. Design, testing, and documentation. Linear and nonlinear data structures. Recursive data definitions. Abstraction and encapsulation. Generative and structural recursion. Historical context.","academic_level":"undergraduate"},{"course_id":"012041","subject":"CS","catalog_number":"136","title":"Elementary Algorithm Design and Data Abstraction","units":0.5,"description":"This course builds on the techniques and patterns learned in CS 135 while making the transition to use an imperative language. It introduces the design and analysis of algorithms, the management of information, and the programming mechanisms and methodologies required in implementations. Topics discussed include iterative and recursive sorting algorithms; lists, stacks, queues, trees, and their application; abstract data types and their implementations.","academic_level":"undergraduate"},{"course_id":"012886","subject":"CS","catalog_number":"137","title":"Programming Principles","units":0.5,"description":"Review of fundamental programming concepts and their application. Procedures and parameter passing. Arrays and structures. Recursion. Sorting. Pointers and simple dynamic structures. Space and time analysis of designs. Design methodologies. [Offered: F]","academic_level":"undergraduate"},{"course_id":"012887","subject":"CS","catalog_number":"138","title":"Introduction to Data Abstraction and Implementation","units":0.5,"description":"Software abstractions via elementary data structures and their implementation; encapsulation and modularity; class and interface definitions; object instantiation; recursion; elementary abstract data types, including sequences, stacks, queues, and trees; implementation using linked structures and arrays; vectors and strings; memory models; automatic vs. dynamic memory management.","academic_level":"undergraduate"},{"course_id":"012767","subject":"CS","catalog_number":"145","title":"Designing Functional Programs (Advanced Level)","units":0.5,"description":"CS 145 is an advanced-level version of CS 135.","academic_level":"undergraduate"},{"course_id":"013657","subject":"CS","catalog_number":"146","title":"Elementary Algorithm Design and Data Abstraction (Advanced Level)","units":0.5,"description":"CS 146 is an advanced-level version of CS 136.","academic_level":"undergraduate"},{"course_id":"004372","subject":"CS","catalog_number":"200","title":"Concepts for Advanced Computer Usage","units":0.5,"description":"Important concepts underlying major personal computer application categories; methodologies for learning and evaluating software; operating system and hardware design from the user's point of view, with implications for maintaining a personal computer. Students are encouraged to use their own personal computer for assignments. Social media and the effect of technology on society are explored throughout the course. [Offered: W,S]","academic_level":"undergraduate"},{"course_id":"004374","subject":"CS","catalog_number":"230","title":"Introduction to Computers and Computer Systems","units":0.5,"description":"Basic computer architecture, organization, system services, and software. Typology of processors, memory, I\/O devices and their performance.","academic_level":"undergraduate"},{"course_id":"015400","subject":"CS","catalog_number":"231","title":"Algorithmic Problem Solving","units":0.5,"description":"The study of the steps required to solve real-world problems on a computer, including problem specification, choice of algorithmic paradigm, analysis, and implementation. Topics include exhaustive search, divide and conquer, greedy, and dynamic programming approaches.","academic_level":"undergraduate"},{"course_id":"004375","subject":"CS","catalog_number":"234","title":"Data Types and Structures","units":0.5,"description":"Top-down design of data structures. Using representation-independent data types. Introduction to commonly used data types, including lists, sets, mappings, and trees. Selection of data representation.","academic_level":"undergraduate"},{"course_id":"004377","subject":"CS","catalog_number":"240","title":"Data Structures and Data Management","units":0.5,"description":"Introduction to widely used and effective methods of data organization, focusing on data structures, their algorithms, and the performance of these algorithms. Specific topics include priority queues, sorting, dictionaries, data structures for text processing.","academic_level":"undergraduate"},{"course_id":"015405","subject":"CS","catalog_number":"240E","title":"Data Structures and Data Management (Enriched)","units":0.5,"description":"Enriched version of CS 240.","academic_level":"undergraduate"},{"course_id":"004378","subject":"CS","catalog_number":"241","title":"Foundations of Sequential Programs","units":0.5,"description":"The relationship between high-level languages and the computer architecture that underlies their implementation, including basic machine architecture, assemblers, specification and translation of programming languages, linkers and loaders, block-structured languages, parameter passing mechanisms, and comparison of programming languages.","academic_level":"undergraduate"},{"course_id":"015406","subject":"CS","catalog_number":"241E","title":"Foundations of Sequential Programs (Enriched)","units":0.5,"description":"Enriched version of CS 241.","academic_level":"undergraduate"},{"course_id":"011405","subject":"CS","catalog_number":"245","title":"Logic and Computation","units":0.5,"description":"Propositional and predicate logic. Soundness and completeness and theirimplications. Unprovability of formulae in certain systems. Undecidability of problems in computation, including the halting problem. Reasoning about programs. Correctness proofs for both recursive and iterative program constructions.","academic_level":"undergraduate"},{"course_id":"015407","subject":"CS","catalog_number":"245E","title":"Logic and Computation (Enriched)","units":0.5,"description":"Enriched version of CS 245.","academic_level":"undergraduate"},{"course_id":"004380","subject":"CS","catalog_number":"246","title":"Object-Oriented Software Development","units":0.5,"description":"Introduction to object-oriented programming and to tools and techniques for software development. Designing, coding, debugging, testing, and documenting medium-sized programs: reading specifications and designing software to implement them; selecting appropriate data structures and control structures; writing reusable code; reusing existing code; basic performance issues; debuggers; test suites.","academic_level":"undergraduate"},{"course_id":"015408","subject":"CS","catalog_number":"246E","title":"Object-Oriented Software Development (Enriched)","units":0.5,"description":"Enriched version of CS 246.","academic_level":"undergraduate"},{"course_id":"013805","subject":"CS","catalog_number":"247","title":"Software Engineering Principles","units":0.5,"description":"Systematic methods for designing, coding, testing, and documenting medium-sized programs. Major topics include abstraction, modularity, software modeling, object-oriented programming and design, generic programming, testing and debugging.","academic_level":"undergraduate"},{"course_id":"004382","subject":"CS","catalog_number":"251","title":"Computer Organization and Design","units":0.5,"description":"Overview of computer organization and performance. Basics of digital logic design. Combinational and sequential elements. Data representation and manipulation. Basics of processor design. Pipelining. Memory hierarchies. Multiprocessors.","academic_level":"undergraduate"},{"course_id":"004385","subject":"CS","catalog_number":"330","title":"Management Information Systems","units":0.5,"description":"An introduction to information systems and their strategic role in business. Topics include types of information systems, organizational requirements, systems development strategies, decision support systems, data and information management, and information systems management, control and implementation. [Offered: F,W,S]","academic_level":"undergraduate"},{"course_id":"013658","subject":"CS","catalog_number":"335","title":"Computational Methods in Business and Finance","units":0.5,"description":"An introduction to numerical methods for business and finance. Floating-point arithmetic, interpolation. Methods for portfolio optimization and contingent-claims valuation. Solution of nonlinear equations. Monte Carlo methods, lattice methods, simulation of hedging strategies. [Offered: F,W]","academic_level":"undergraduate"},{"course_id":"004390","subject":"CS","catalog_number":"338","title":"Computer Applications in Business: Databases","units":0.5,"description":"A user-oriented approach to the management of large collections of data. Methods used for the storage, selection and presentation of data. Common database management systems.","academic_level":"undergraduate"},{"course_id":"004392","subject":"CS","catalog_number":"341","title":"Algorithms","units":0.5,"description":"The study of efficient algorithms and effective algorithm design techniques. Program design with emphasis on pragmatic and mathematical aspects of program efficiency. Topics include divide and conquer algorithms, recurrences, greedy algorithms, dynamic programming, graph search and backtrack, problems without algorithms, NP-completeness and its implications.","academic_level":"undergraduate"},{"course_id":"011417","subject":"CS","catalog_number":"343","title":"Concurrent and Parallel Programming","units":0.5,"description":"An introduction to concurrent and parallel programming, with an emphasis on language constructs. Major topics include: exceptions, coroutines, atomic operations, critical sections, mutual exclusion, semaphores, high-level concurrency, deadlock, interprocess communication, process structuring, shared memory and distributed architectures. Students will learn how to structure, implement and debug concurrent programs.","academic_level":"undergraduate"},{"course_id":"004417","subject":"CS","catalog_number":"348","title":"Introduction to Database Management","units":0.5,"description":"The main objective of this course is to introduce students to fundamentals of database technology by studying databases from three viewpoints: those of the database user, the database designer, and the database administrator. It teaches the use of a database management system (DBMS) by treating it as a black box, focusing only on its functionality and its interfaces. Topics include: introduction to database systems, relational database systems, database design methodology, SQL and interfaces, database application development, concept of transactions, ODBC, JDBC, database tuning, database Administration, and current topics (distributed databases, data warehouses, data mining).","academic_level":"undergraduate"},{"course_id":"011727","subject":"CS","catalog_number":"349","title":"User Interfaces","units":0.5,"description":"An introduction to contemporary user interfaces, including the basics of human-computer interaction, the user interface design\/evaluation process, the event abstraction, user interface components, specification of user interfaces, and the architectures within which user interfaces are developed. Implementation and evaluation of a typical user interface is considered.","academic_level":"undergraduate"},{"course_id":"011416","subject":"CS","catalog_number":"350","title":"Operating Systems","units":0.5,"description":"An introduction to the fundamentals of operating system function, design, and implementation. Topics include concurrency, synchronization, processes, threads, scheduling, memory management, file systems, device management, and security.","academic_level":"undergraduate"},{"course_id":"004398","subject":"CS","catalog_number":"360","title":"Introduction to the Theory of Computing","units":0.5,"description":"Models of computers including finite automata and Turing machines. Basics of formal languages with applications to the syntax of programming languages. Alternate characterizations of language classes. Proving unrecognizability. Unsolvable problems and their relevance to the semantics of programming.","academic_level":"undergraduate"},{"course_id":"011347","subject":"CS","catalog_number":"365","title":"Models of Computation","units":0.5,"description":"Finite automata and regular expressions. Pushdown automata and context-free grammars. Turing machines and undecidability. Time and space complexity. Diagonalization and hierarchies. CS 365 covers the material in CS 360 at an accelerated pace plus additional topics in computational complexity.","academic_level":"undergraduate"},{"course_id":"004400","subject":"CS","catalog_number":"370","title":"Numerical Computation","units":0.5,"description":"Principles and practices of basic numerical computation as a key aspect of scientific computation. Visualization of results. Approximation by splines, fast Fourier transforms, solution of linear and nonlinear equations, differential equations, floating point number systems, error, stability. Presented in the context of specific applications to image processing, analysis of data, scientific modeling.","academic_level":"undergraduate"},{"course_id":"011363","subject":"CS","catalog_number":"371","title":"Introduction to Computational Mathematics","units":0.5,"description":"A rigorous introduction to the field of computational mathematics. The focus is on the interplay between continuous models and their solution via discrete processes. Topics include pitfalls in computation, solution of linear systems, interpolation, discrete Fourier transforms, and numerical integration. Applications are used as motivation.","academic_level":"undergraduate"},{"course_id":"015143","subject":"CS","catalog_number":"383","title":"Computational Digital Art Studio","units":0.5,"description":"An upper-level studio course to create computational projects that function as art works and aesthetic experiences. Students will work in interdisciplinary teams to combine computer science principles with fine art technical and conceptual skills. [Offered: W]","academic_level":"undergraduate"},{"course_id":"011409","subject":"CS","catalog_number":"398","title":"Topics in Computer Science","units":0.5,"description":"See the Course Offerings List for topics available.","academic_level":"undergraduate"},{"course_id":"011410","subject":"CS","catalog_number":"399","title":"Readings in Computer Science","units":0.5,"description":"Reading course as announced by the department.","academic_level":"undergraduate"},{"course_id":"004404","subject":"CS","catalog_number":"430","title":"Applications Software Engineering","units":0.5,"description":"An investigation into the role and function of software engineering practice in the construction of computer based systems. Topics include: requirements and specification; documentation techniques; analysis and design; implementation; testing and maintenance; management issues. [Offered: F,W]","academic_level":"undergraduate"},{"course_id":"015547","subject":"CS","catalog_number":"431","title":"Data-Intensive Distributed Analytics","units":0.5,"description":"Introduces non-CS major students to infrastructure for data-intensive analytics, with a focus on abstractions, frameworks, and algorithms that allow developers to distribute computation across many machines. Topics include core concepts (partitioning, replication, locality, consistency), computational models (MapReduce, dataflows, stream processing, bulk-synchronous parallel), and applications. [Offered: F,W]","academic_level":"undergraduate"},{"course_id":"004405","subject":"CS","catalog_number":"432","title":"Business Systems Analysis","units":0.5,"description":"Survey of organization and management theory. Systems theory and the systems approach. Systems design. Database concepts. Implementation and evaluation of computer based information systems. [Offered: F,S]","academic_level":"undergraduate"},{"course_id":"004407","subject":"CS","catalog_number":"436","title":"Networks and Distributed Computer Systems","units":0.5,"description":"An introduction to networks, protocols, and distributed systems. Layered models, resource management, naming, addressing and routing, reliable communication, security, and higher-level services.","academic_level":"undergraduate"},{"course_id":"004410","subject":"CS","catalog_number":"442","title":"Principles of Programming Languages","units":0.5,"description":"An exposure to important concepts and issues in contemporary programming languages. Data types, abstraction, and polymorphism. Program structure. Lambda calculus and functional programming, logic programming, object-oriented programming. Semantics of programming languages. Critical comparison of language features and programming methodologies using examples drawn from a variety of programming languages including Lisp, Prolog, ML, Ada, Smalltalk, Icon, APL, and Lucid. Programming assignments involve the use of some of these languages.","academic_level":"undergraduate"},{"course_id":"004412","subject":"CS","catalog_number":"444","title":"Compiler Construction","units":0.5,"description":"Phases of compilation. Lexical analysis and a review of parsing. Compiler-compilers and translator writing systems. LEX and YACC. Scope rules, block structure, and symbol tables. Runtime stack management. Parameter passage mechanisms. Stack storage organization and templates. Heap storage management. Intermediate code. Code generation. Macros.","academic_level":"undergraduate"},{"course_id":"004413","subject":"CS","catalog_number":"445","title":"Software Requirements Specification and Analysis","units":0.5,"description":"Introduces students to the requirements definition phase of software development. Models, notations, and processes for software requirements identification, representation, analysis, and validation. Cost estimation from early documents and specifications.","academic_level":"undergraduate"},{"course_id":"004414","subject":"CS","catalog_number":"446","title":"Software Design and Architectures","units":0.5,"description":"Introduces students to the design, implementation, and evolution phases of software development. Software design processes, methods, and notation. Implementation of designs. Evolution of designs and implementations. Management of design activities.","academic_level":"undergraduate"},{"course_id":"004416","subject":"CS","catalog_number":"447","title":"Software Testing, Quality Assurance and Maintenance","units":0.5,"description":"Introduces students to systematic testing of software systems. Software verification, reviews, metrics, quality assurance, and prediction of software reliability and availability. Related management issues.","academic_level":"undergraduate"},{"course_id":"012300","subject":"CS","catalog_number":"448","title":"Database Systems Implementation","units":0.5,"description":"The objective of this course is to introduce students to fundamentals of building a relational database management system. The course focuses on the database engine core technology by studying topics such as storage management (data layout, disk-based data structures), indexing, query processing algorithms, query optimization, transactional concurrency control, logging and recovery.","academic_level":"undergraduate"},{"course_id":"013910","subject":"CS","catalog_number":"449","title":"Human-Computer Interaction","units":0.5,"description":"An introduction to the fundamental theories, methods, and research in the design and evaluation of novel computational artifacts designed to meet real-world human needs.","academic_level":"undergraduate"},{"course_id":"004418","subject":"CS","catalog_number":"450","title":"Computer Architecture","units":0.5,"description":"The course is intended to provide the student with an appreciation of modern computer design and its relation to system architecture, compiler technology and operating system functionality. The course places an emphasis on design based on the measurement of performance and its dependency on parallelism, efficiency, latency and resource utilization.","academic_level":"undergraduate"},{"course_id":"015315","subject":"CS","catalog_number":"451","title":"Data-Intensive Distributed Computing","units":0.5,"description":"Introduces students to infrastructure for data-intensive computing, with a focus on abstractions, frameworks, and algorithms that allow developers to distribute computations across many machines. \u00a0Topics include core concepts (partitioning, replication, locality, consistency), computational models (MapReduce, dataflows, stream processing, bulk-synchronous parallel), and applications. [Offered: F,W]","academic_level":"undergraduate"},{"course_id":"004419","subject":"CS","catalog_number":"452","title":"Real-time Programming","units":0.5,"description":"Intended to give students experience with tools and techniques of real-time programming, this course includes not only issues of microcomputer architecture and a real-time programming language and operating system, but also hands-on experience programming a microcomputer for applications such as process control, data acquisition and communication.","academic_level":"undergraduate"},{"course_id":"004420","subject":"CS","catalog_number":"454","title":"Distributed Systems","units":0.5,"description":"An introduction to distributed systems, emphasizing the multiple levels of software in such systems. Specific topics include fundamentals of data communications, network architecture and protocols, local-area networks, concurrency control in distributed systems, recovery in distributed systems, and clock synchronization.","academic_level":"undergraduate"},{"course_id":"010167","subject":"CS","catalog_number":"456","title":"Computer Networks","units":0.5,"description":"An introduction to network architectures and protocols, placing emphasis on protocols used in the Internet. Specific topics include application layer protocols, network programming, transport protocols, routing, multicast, data link layer issues, multimedia networking, network security, and network management. [Offered: F,W,S]","academic_level":"undergraduate"},{"course_id":"004422","subject":"CS","catalog_number":"457","title":"System Performance Evaluation","units":0.5,"description":"Basic techniques of system performance evaluation. Specific topics include: performance modeling, discrete event simulation, verification and validation of simulation models, analysis of simulation output, analysis of single server queue and queueing networks, modeling of computer systems, networks, and other queueing or non-queueing systems.","academic_level":"undergraduate"},{"course_id":"012980","subject":"CS","catalog_number":"458","title":"Computer Security and Privacy","units":0.5,"description":"Security and privacy issues in various aspects of computing. Specific topics include: comparing security and privacy, program security, writing secure programs, controls against program threats, operating system security, formal security models, network security, Internet application security and privacy, privacy-enhancing technologies, database security and privacy, inference, data mining, security policies, physical security, economics of security, and legal and ethical issues.","academic_level":"undergraduate"},{"course_id":"004424","subject":"CS","catalog_number":"462","title":"Formal Languages and Parsing","units":0.5,"description":"Languages and their representations. Grammars --Chomsky hierarchy. Regular sets and sequential machines. Context-free grammars -- normal forms, basic properties. Pushdown automata and transducers. Operations on languages. Undecidable problems in language theory. Applications to the design of programming languages and compiler construction.","academic_level":"undergraduate"},{"course_id":"004426","subject":"CS","catalog_number":"466","title":"Algorithm Design and Analysis","units":0.5,"description":"Algorithmic approaches and methods of assessment that reflect a broad spectrum of criteria, including randomized algorithms, amortized analysis, lower bounds, approximation algorithms, and on-line algorithms. Particular examples will be chosen from different areas of active research and application. [Offered: F,S]","academic_level":"undergraduate"},{"course_id":"011497","subject":"CS","catalog_number":"467","title":"Introduction to Quantum Information Processing","units":0.5,"description":"Basics of computational complexity; basics of quantum information; quantum phenomena; quantum circuits and universality; relationship between quantum and classical complexity classes; simple quantum algorithms; quantum Fourier transform; Shor factoring algorithm; Grover search algorithm; physical realization of quantum computation; error-correction and fault-tolerance; quantum key distribution. [Offered: W]","academic_level":"undergraduate"},{"course_id":"011446","subject":"CS","catalog_number":"473","title":"Medical Image Processing","units":0.5,"description":"An introduction to computational problems in medical imaging. Sources of medical images (MRI, CT, ultrasound, PET) as well as reconstruction methods for MRI and CT. Image manipulation and enhancement such as denoising and deblurring. Patient motion correction and optimal image alignment. Tissue classification and organ delineation using image topology.","academic_level":"undergraduate"},{"course_id":"011444","subject":"CS","catalog_number":"475","title":"Computational Linear Algebra","units":0.5,"description":"Basic concepts and implementation of numerical linear algebra techniques and their use in solving application problems. Special methods for solving linear systems having special features. Direct methods: symmetric, positive definite, band, general sparse structures, ordering methods.\nIterative methods: Jacobi, Gauss-Seidel, SOR, conjugate gradient. Computing and using orthogonal factorizations of matrices. QR and SVD methods for solving least squares problems. Eigenvalue and singular value decompositions. Computation and uses of these decompositions in practice.","academic_level":"undergraduate"},{"course_id":"003352","subject":"CS","catalog_number":"476","title":"Numeric Computation for Financial Modeling","units":0.5,"description":"The interaction of financial models, numerical methods, and computing environments. Basic computational aspects of option pricing and hedging. Numerical methods for stochastic differential equations, strong and weak convergence. Generating correlated random numbers. Time-stepping methods. Finite difference methods for the Black-Scholes equation. Discretization, stability, convergence. Methods for portfolio optimization, effect of data errors on portfolio weights.","academic_level":"undergraduate"},{"course_id":"015515","subject":"CS","catalog_number":"480","title":"Introduction to Machine Learning","units":0.5,"description":"Introduction to modeling and algorithmic techniques for machines to learn concepts from data. Generalization: underfitting, overfitting, cross-validation. Tasks: classification, regression, clustering. Optimization-based learning: loss minimization. regularization. Statistical learning: maximum likelihood, Bayesian learning. Algorithms: nearest neighbour, (generalized) linear regression, mixtures of Gaussians, Gaussian processes, kernel methods, support vector machines, deep learning, sequence learning, ensemble techniques. Large scale learning: distributed learning and stream learning. Applications: Natural language processing, computer vision, data mining, human computer interaction, information retrieval.","academic_level":"undergraduate"},{"course_id":"004434","subject":"CS","catalog_number":"482","title":"Computational Techniques in Biological Sequence Analysis","units":0.5,"description":"Computer science principles and algorithms in biological sequence analysis. Topics include algorithms for sequence comparison, for large-scale database search in biological databases, for sequence assembly, for evolutionary tree reconstruction, for identifying important features in DNA and RNA sequences, and underlying computational techniques for understanding strings and trees and for making probabilistic inferences. [Offered: W]","academic_level":"undergraduate"},{"course_id":"010043","subject":"CS","catalog_number":"483","title":"Computational Techniques in Structural Bioinformatics","units":0.5,"description":"Algorithms and techniques used in the identification and functional characterization of cellular proteins. Topics include: protein databases, gene expression analysis, protein structure prediction, protein function prediction, active site detection and ligand docking, protein-protein interaction, HTCS (High Throughput Conformational Search), and QSAR (Quantitative Structure-Activity Relationships). [Offered: W]","academic_level":"undergraduate"},{"course_id":"013912","subject":"CS","catalog_number":"484","title":"Computational Vision","units":0.5,"description":"Introduction to image and vision understanding by computer. Camera-system geometry, image formation and lighting, and image acquisition. Basic visual processes for recognition of edges, regions, lines, and surfaces. Processing of stereo images, and motion in image sequences. Object recognition. Applications of computer-vision systems.","academic_level":"undergraduate"},{"course_id":"013911","subject":"CS","catalog_number":"485","title":"Statistical and Computational Foundations of Machine Learning","units":0.5,"description":"Extracting meaningful patterns from random samples of large data sets. Statistical analysis of the resulting problems. Common algorithmic paradigms for such tasks. Central concepts: VC-dimension, margins of a classifier, sparsity and description length, other types of regularization. Performance guarantees: generalization bounds, data dependent error bounds and computational complexity of learning algorithms. Common paradigms: neural networks, kernel methods and support-vector machines, boosting, nearest neighbor classifiers. Applications to data mining.","academic_level":"undergraduate"},{"course_id":"004435","subject":"CS","catalog_number":"486","title":"Introduction to Artificial Intelligence","units":0.5,"description":"Goals and methods of artificial intelligence. Methods of general problem solving. Knowledge representation and reasoning. Planning. Reasoning about uncertainty. Machine learning. Multi-agent systems. Natural language processing.","academic_level":"undergraduate"},{"course_id":"004436","subject":"CS","catalog_number":"487","title":"Introduction to Symbolic Computation","units":0.5,"description":"An introduction to the use of computers for symbolic mathematical computation, involving traditional mathematical computations such as solving linear equations (exactly), analytic differentiation and integration of functions, and analytic solution of differential equations.","academic_level":"undergraduate"},{"course_id":"004437","subject":"CS","catalog_number":"488","title":"Introduction to Computer Graphics","units":0.5,"description":"Software and hardware for interactive computer graphics. Implementation of device drivers, 3-D transformations, clipping, perspective, and input routines. Data structures, hidden surface removal, colour shading techniques, and some additional topics will be covered.","academic_level":"undergraduate"},{"course_id":"010044","subject":"CS","catalog_number":"489","title":"Advanced Topics in Computer Science","units":0.5,"description":"See the Course Offerings List for topics available.","academic_level":"undergraduate"},{"course_id":"004433","subject":"CS","catalog_number":"490","title":"Information Systems Management","units":0.5,"description":"The integration of business and technical considerations in the design, implementation and management of information systems. Topics include: IS planning and development; business, management, executive, and strategic information systems, including case studies of selected large- scale systems; decision support systems; end-user training and development; systems security, disaster planning and recovery. Practical examples of information systems in industry. [Offered: W,S]","academic_level":"undergraduate"},{"course_id":"004438","subject":"CS","catalog_number":"492","title":"The Social Implications of Computing","units":0.5,"description":"This course is designed to consider the problems encountered by individuals, organizations and society as computer technology is adopted, with a view towards assessing possible courses of action. [Offered: W,S]","academic_level":"undergraduate"},{"course_id":"015545","subject":"CS","catalog_number":"493","title":"Team Project 1","units":0.5,"description":"Students work in teams on substantial open-ended computer science problems as part of the CS 493\/494 course sequence. Lectures describe project management\u00a0fundamentals and ethical and legal issues in computing. Students form teams, select projects,\u00a0define project goals, perform risk assessment, establish\u00a0a project\u00a0plan, and\u00a0develop\u00a0a prototype. Possible project topics can include development of software systems, analysis of extensions to existing systems across the field, and\u00a0experimental computer science.[Offered: F]","academic_level":"undergraduate"},{"course_id":"015546","subject":"CS","catalog_number":"494","title":"Team Project 2","units":0.5,"description":"Continuing from CS 493, student teams continue development of their project, update project plans, explore design alternatives, perform testing, and analyze experimental results. Teams prepare and deliver technical presentations and demonstrations of their projects, and analyze ethical and legal aspects of their work. [Offered: W]","academic_level":"undergraduate"},{"course_id":"012280","subject":"CS","catalog_number":"497","title":"Multidisciplinary Studies in Computer Science","units":0.5,"description":"See the Course Offerings list for topics available.","academic_level":"undergraduate"},{"course_id":"004444","subject":"CS","catalog_number":"499R","title":"Readings in Computer Science","units":0.5,"description":"Reading course as announced by the department.","academic_level":"undergraduate"},{"course_id":"012560","subject":"CS","catalog_number":"499T","title":"Honours Thesis","units":0.5,"description":"The student will undertake new analysis, synthesis, measurement, or experimentation to produce a document that demonstrates a depth of understanding of a topic that goes beyond what is obtained in a standard undergraduate education.","academic_level":"undergraduate"},{"course_id":"014934","subject":"CS","catalog_number":"634","title":"Security and Privacy in Health Systems","units":0.5,"description":"An overview of basic security and privacy principles relevant in the design and use of applications in health settings.  Program security, operating system security, network security, data security, and issues related to the management of security and privacy policies are introduced.  Master of Health Informatics students only.","academic_level":"graduate"},{"course_id":"014935","subject":"CS","catalog_number":"636","title":"Introduction to Computer Networks and Distributed Computer Systems","units":0.5,"description":"An introduction to computer networks, Internet protocols, and distributed systems.  Layered models, naming, addressing and routing, reliable communication, security, and elements of distributed system design. Master of Health Informatics students only.","academic_level":"graduate"},{"course_id":"014936","subject":"CS","catalog_number":"638","title":"Principles of Data Management and Use","units":0.5,"description":"A user-oriented approach to the management of large collections of data.  Relational database technology, relational algebra, SQL, database views, transactions, data modelling methodology, entity-relationship models.  Introduction to several current topics in database research, such as warehousing, data mining, managing data streams, data cleaning, data integration, and distributed\/parallel databases.  Master of Health Informatics students only.","academic_level":"graduate"},{"course_id":"013602","subject":"CS","catalog_number":"640","title":"Principles of Database Management and Use","units":0.5,"description":"An overview of relational databases and how they are used; exposure to relational database technology.  Fundamentals of transactions.  Database views. Introductions to two or three alternative data models and systems, such as those used for structured text, spatial data, multimedia data, and information retrieval.  Introduction to several current topics in database research, such as warehousing, data mining, managing data streams, data cleaning, data integration, and distributed databases.","academic_level":"graduate"},{"course_id":"000599","subject":"CS","catalog_number":"642","title":"Principles of Programming Languages","units":0.5,"description":"An exposure to important concepts and issues in contemporary programming languages. Data types, abstraction, and polymorphism. Program structure. Lambda calculus and functional programming, logic programming, object-oriented programming. Semantics of programming languages. Critical comparison of language features and programming methodologies using examples drawn from a variety of programming languages including Lisp, Prolog, ML, Ada, Smalltalk, Icon, APL, and Lucid. Programming assignments involve the use of some of these languages.","academic_level":"graduate"},{"course_id":"000601","subject":"CS","catalog_number":"644","title":"Compiler Construction","units":0.5,"description":"Phases of compilation. Lexical analysis and a review of parsing. Compiler-compilers and translator writing systems. LEX and YACC. Scope rules, block structure, and symbol tables. Runtime stack management. Parameter passage mechanisms. Stack storage organization and templates. Heap storage management. Intermediate code. Code generation. Macros.","academic_level":"graduate"},{"course_id":"000602","subject":"CS","catalog_number":"645","title":"Software Requirements Specification and Analysis","units":0.5,"description":"Introduces students to the requirements definition phase of software development: Models, notations, and processes for software requirements identification, representation, analysis, and validation.  Cost estimation from early documents and specifications.","academic_level":"graduate"},{"course_id":"000603","subject":"CS","catalog_number":"646","title":"Software Design and  Architectures","units":0.5,"description":"Introduces students to the design, implementation, and evolution phases of software development.  Software design processes, methods, and notation.  Implementation of designs. Evolution of designs and implementations.  Management of design activities.","academic_level":"graduate"},{"course_id":"000604","subject":"CS","catalog_number":"647","title":"Software Testing, Quality Assurance and Maintenance","units":0.5,"description":"Introduces students to systematic testing of software systems.  Software verification, reviews, metrics, quality assurance, and prediction of software reliability and availability.  Related management issues.","academic_level":"graduate"},{"course_id":"000605","subject":"CS","catalog_number":"648","title":"Database Systems Implementation","units":0.5,"description":"The objective of this course is to introduce students to fundamentals of building a relational database management system.  The course focuses on the database engine core technology by studying topics such as storage management (data layout, disk-based data structures), indexing, query processing algorithms, query optimization, transactional concurrency control, logging and recovery.  Preference will be given to CS graduate students.  All other require permission from the school.","academic_level":"graduate"},{"course_id":"014064","subject":"CS","catalog_number":"649","title":"Human-Computer Interaction","units":0.5,"description":"An introduction to the fundamental theories, methods, and research in the design and evaluation of description:  novel computational artifacts designed to meet real-world human needs.","academic_level":"graduate"},{"course_id":"000606","subject":"CS","catalog_number":"650","title":"Computer Architecture","units":0.5,"description":"The course is intended to provide the student with an appreciation of modern computer design and its relation to system architecture, compiler technology and operating system functionality. The course places an emphasis on design based on the measurement of performance and its dependency on parallelism, efficiency, latency and resource utilization.","academic_level":"graduate"},{"course_id":"000607","subject":"CS","catalog_number":"652","title":"Real-Time Programming","units":0.5,"description":"Intended to give students experience with tools and techniques of real-time programming, this course includes not only issues of microcomputer architecture and a real-time programming language and operating system, but also hands-on experience programming a microcomputer for applications such as process control, data acquisition and communication. .Preference will be given to CS graduate students.  All others require approval from the department.","academic_level":"graduate"},{"course_id":"000608","subject":"CS","catalog_number":"654","title":"Distributed Systems","units":0.5,"description":"An introduction to distributed systems, emphasizing the multiple levels of software in such systems. Specific topics include fundamentals of data communications, network architecture and protocols, local-area networks, concurrency control in distributed systems, recovery in distributed systems, and clock synchronization. Preference will be given to CS graduate students.  All others require approval from the department.","academic_level":"graduate"},{"course_id":"013603","subject":"CS","catalog_number":"655","title":"System and Network Architectures and Implementation","units":0.5,"description":"Distributed, multi-user applications are designed and implemented using many underlying technologies that must be coordinated to provide important features such as robustness, scalability, manageability, ubiquitous access, privacy, security, authentication, and role-based access control, to name only a few.  The network supporting the application may be crucial to its successful implementation.  The application logic itself is likely implemented in a number of languages and programming environments.  Students will be provided with an advanced overview of current networking and distributed systems topics, and will apply it to case studies drawn form consumer internet applications, enterprise systems, and medical and healthcare systems.","academic_level":"graduate"},{"course_id":"000609","subject":"CS","catalog_number":"656","title":"Computer Networks","units":0.5,"description":"An introduction to network architectures and protocols, placing emphasis on protocols used in the Internet.  Specific topics include application layer protocols, network programming, transport protocols, routing, multicast, data link layer issues, multimedia networking, network security, and network management.","academic_level":"graduate"},{"course_id":"000610","subject":"CS","catalog_number":"657","title":"System Performance Evaluation","units":0.5,"description":"Basic techniques of system performance evaluation. Specific topics include: performance modeling, discrete event simulation, verification and validation of simulation models, analysis of simulation output, analysis of single server queue and queueing networks, modeling of computer systems, networks, and other queueing or non-queueing systems.","academic_level":"graduate"},{"course_id":"000611","subject":"CS","catalog_number":"658","title":"Computer Security and Privacy","units":0.5,"description":"Security and privacy issues in various aspects of computing.  Specific topics include: comparing security and privacy, program security, writing secure programs, controls against program threats, operating system security, formal security models, network security, Internet application security and privacy, privacy-enhancing technologies, database security and privacy, inference data mining, security policies, physical security, economics of security, and legal and ethical issues.  (Note: Knowledge of operating systems equivalent to that obtained from CS 350 is assumed.)","academic_level":"graduate"},{"course_id":"000612","subject":"CS","catalog_number":"662","title":"Formal Languages and Parsing","units":0.5,"description":"Languages and their representations. Grammars-Chomsky hierarchy. Regular sets and sequential machines. Context-free grammars-normal forms, basic properties. Pushdown automata and transducers. Operations on languages. Undecidable problems in language theory. Applications to the design of programming languages and compiler construction.","academic_level":"graduate"},{"course_id":"000613","subject":"CS","catalog_number":"664","title":"Computational Complexity Theory","units":0.5,"description":"The classification of problems according to the computational resources required for their solution, with emphasis on properties of feasible computations rather than on specific algorithms. Topics include: time and space complexity, tractable and intractable problems, computation using randomness, parallel computation.","academic_level":"graduate"},{"course_id":"000614","subject":"CS","catalog_number":"666","title":"Algorithm Design and Analysis","units":0.5,"description":"Design of good algorithms and analysis of the resources they consume. Lower bounds on the resource requirements of algorithms to compute certain functions. Problems from the following areas are discussed in this light: sorting and order statistics, data structures, arithmetic computations, the NP-complete problems.","academic_level":"graduate"},{"course_id":"011589","subject":"CS","catalog_number":"667","title":"Quantum Information Processing","units":0.5,"description":"Review of basics of quantum information and computational complexity; Simple quantum algorithms; Quantum Fourier transform and Shor factoring algorithm: Amplitude amplification, Grover search algorithm and its optimality; Completely positive trace-preserving maps and Kraus representation; Non-locality and communication complexity; Physical realizations of quantum computation: requirements and examples; Quantum error-correction, including CSS codes, and elements of fault-tolerant computation; Quantum cryptography; Security proofs of quantum key distribution protocols; Quantum proof systems.  Familiarity with theoretical computer science or quantum mechanics will also be an asset, though most students will not be familiar with both.","academic_level":"graduate"},{"course_id":"012670","subject":"CS","catalog_number":"670","title":"Numerical Analysis","units":0.5,"description":"Introduction to basic algorithms and techniques for numerical computing.  Error analysis, interpolation (including splines), numerical differentiation and integration, numerical linear algebra (including methods for linear systems, eigenvalue problems, and the singular value decomposition), root finding for nonlinear equations and systems, numerical ordinary differential equations, and approximation methods (including least squares, orthogonal polynomials, and Fourier transforms).","academic_level":"graduate"},{"course_id":"000617","subject":"CS","catalog_number":"672","title":"Numerical Solution of Large Sparse Systems of Equations","units":0.5,"description":"Introduction, example applications from finite element analysis, optimization. Data structures, basic graph theory. Direct methods: symmetric structures, non-symmetric structures, ordering methods; RCM, minimum degree, nested dissection. Iterative methods: steepest descent, conjugate gradient, GMRES, CGSTAB. Preconditioning methods; level of fill, drop tolerance. Methods for high performance architectures.","academic_level":"graduate"},{"course_id":"011588","subject":"CS","catalog_number":"673","title":"Medical Image Processing","units":0.5,"description":"An introduction to computational problems in medical imaging.  Sources of medical images (MRI, CT, ultrasound, PET) as well as reconstruction methods for MRI and CT.  Image manipulation and enhancement such as denoising and deblurring.  Patient motion correction and optimal image alignment.  Tissue classification and organ delineation using image topology.  (Note: Lab is not scheduled and students are expected to find time in open hours to complete their work.  Offered: W)","academic_level":"graduate"},{"course_id":"014065","subject":"CS","catalog_number":"675","title":"Computational Linear Algebra","units":0.5,"description":"Basic concepts and implementation of numerical linear algebra techniques and their use in solving application problems.  Special methods for solving linear systems having special features.  Direct methods: symmetric, positive definite, band, general sparse structures, ordering methods.  Iterative methods: Jacobi, Gauss-Seidel, SOR, conjugate gradient.  Computing and using orthogonal factorizations of matrices.  QR and SVD methods for solving least squares problems.  Eigenvalue and singular value decompositions.  Computation and uses of these decompositions in practice.","academic_level":"graduate"},{"course_id":"000620","subject":"CS","catalog_number":"676","title":"Numeric Computation for Financial Modelling","units":0.5,"description":"The interaction of financial modes, numerical methods, and computing environments.  Basic computational aspects of option pricing and hedging. Numerical methods for stochastic differential equations, strong and weak convergence.  Generating correlated random numbers.  Time-stepping methods.  Finite difference methods for Black-Scholes equation.  Discretization, stability, convergence.  Methods for portfolio optimization, effect of data errors on portfolio weights. (Heldwith CS 476).","academic_level":"graduate"},{"course_id":"011302","subject":"CS","catalog_number":"682","title":"Computational Techniques in Biological Sequence Analysis","units":0.5,"description":"Computer science principles and algortihms in biological sequence analysis.  Topics include algotithms for sequence comparison, for large-scale database search in biological databases, for sequence assembly, for evolutionary tree reconstruction, for identifying important featrues in DNA and RNA sequences, and underlying computational techniques for understanding strings and trees and for making probabilistic inferences. (Heldwith CS 482).","academic_level":"graduate"},{"course_id":"011303","subject":"CS","catalog_number":"683","title":"Computational Techniques in Structural Bioinformatics","units":0.5,"description":"Algorithms and techniques used in the identification and functional characterization of cellular proteins.  Topics include: protein databases, gene expression analysis, protein structure prediction, protein function prediction, active site detection and ligand docking, protein-protein interaction, HTCS (High Throughput Conformational Search), and QSAR (Quantitative Structure-Activity Relationships).  (Heldwith CS 483).","academic_level":"graduate"},{"course_id":"000623","subject":"CS","catalog_number":"684","title":"Computational Vision","units":0.5,"description":"Introduction to image and vision understanding by computer.  Camera-system geometry, image formation and lighting, and image acquisition.  Basic visual processes for recognition of edges, regions, lines, and surfaces.  Processing of stereo images, and motion in image sequences.  Object recognition.  Applications of computer vision systems.","academic_level":"graduate"},{"course_id":"000624","subject":"CS","catalog_number":"685","title":"Machine Learning: Statistical and Computational Foundations","units":0.5,"description":"Extracting meaningful patterns from random samples of large data sets.  Statistical analysis of the resulting problems. Common algorithm paradigms for such tasks.  Central concepts: VC-dimension, Margins of classifier, Sparsity and description length.  Performance guarantees: Generalization bounds, data dependent error bounds and computational complexity of learning algorithms.  Common paradigms: Neural networks, Kernel methods and Support Vector machines, Applications to Data Mining.","academic_level":"graduate"},{"course_id":"000625","subject":"CS","catalog_number":"686","title":"Introduction to Artificial Intelligence","units":0.5,"description":"Goals and methods of artificial intelligence. Methods of general problem solving. Introduction to mathematical logic Mechanical theorem proving. Game playing. Natural language processing. Preference will be given to CS graduate students.  All others require approval from the department. Department approval will be by Undergraduate Advisor.","academic_level":"graduate"},{"course_id":"000626","subject":"CS","catalog_number":"687","title":"Introduction to Symbolic Computation","units":0.5,"description":"An introduction to the use of computers for symbolic mathematical computation, involving traditional mathematical computations such as solving linear equations (exactly), analytic differentiation and integration of functions, and analytic solution of differential equations.","academic_level":"graduate"},{"course_id":"000627","subject":"CS","catalog_number":"688","title":"Introduction to Computer Graphics","units":0.5,"description":"Software and hardware for interactive computer graphics. Implementation of device drivers, 3-D transformations, clipping, perspective, and input routines. Data structures, hidden surface removal, colour shading techniques, and some additional topics will be covered. Preference will be given to CS graduate students.  All others require approval from the department.","academic_level":"graduate"},{"course_id":"000630","subject":"CS","catalog_number":"690A","title":"Literature and Research Studies","units":0.5,"description":"This is an individual study course carried out under the supervision of a Computer Science faculty member. The topic should be agreed upon by both the student and the instructor. This is a credit\/no credit course. Department permission will be by Coordinator of Graduate Studies.","academic_level":"graduate"},{"course_id":"000631","subject":"CS","catalog_number":"690B","title":"Literature and Research Studies","units":0.5,"description":"This is an individual study course carried out under the supervision of a Computer Science faculty member. The topic should be agreed upon by both the student and the instructor. This is a grade course. Department permission will be by Coordinator of Graduate Studies.","academic_level":"graduate"},{"course_id":"000632","subject":"CS","catalog_number":"692","title":"The Social Implications of Computing","units":0.5,"description":"This course is designed to consider the problems encountered by individuals, organizations and society as computer technology is adopted, with a view towards assessing possible courses of action.","academic_level":"graduate"},{"course_id":"009076","subject":"CS","catalog_number":"697","title":"Graduate Research Skills Seminar","units":0,"description":"Research and life skills that can help graduate students improve their academic and interpersonal competence-research methodologies, library research skills, creative and critical thinking, time management, stress management, technical reading skills, listening skills, oral communication, writing and publishing in computer science, jobs in academica versus industry.","academic_level":"graduate"},{"course_id":"010461","subject":"CS","catalog_number":"698","title":"Introductory Research Topics","units":0.5,"description":"This number is used for courses being offered on a temporary basis. Such a course may be available only once, for example to take advantage of a visiting professor's expertise, or may be offered experimentally until it is determined whether of not the course should become part of the regular course offerings. It may also be used for an individual study course carried out under the supervision of a Computer Science faculty member with the approval from the Associate Chair, Graduate Studies. This is a grade course. Preference will be given to CS graduate students.  All others require approval of the Department.","academic_level":"graduate"},{"course_id":"011293","subject":"CS","catalog_number":"740","title":"Database Engineering","units":0.5,"description":"Project-oriented course that covers the implementation of relational database management systems. Topics include database system architecture; managing primary and secondary storage; query processing; metadata and catalog management; language processing; query optimization and plan generation; concurrency; failures and recovery; extensibility; client-server interactions.","academic_level":"graduate"},{"course_id":"011294","subject":"CS","catalog_number":"741","title":"Non-Traditional Databases","units":0.5,"description":"Management of non-relational databases, such as multimedia databases, text databases, temporal databases or spatial databases. Each offering will target a specific type of data. Topics include rationale for and common applications of non-relational database management; systems and standards; the abstract data model; data definition and manipulation languages; data storage and indexing; query processing and optimization; updates and transaction management.","academic_level":"graduate"},{"course_id":"000650","subject":"CS","catalog_number":"742","title":"Parallel and Distributed Database Systems","units":0.5,"description":"Algorithms and architectures used in parallel database management systems, with a focus on relational systems. Topics include system architectures; parallel and distributed query processing; federated dtabase systems; distributed transactions; data replication.","academic_level":"graduate"},{"course_id":"013602","subject":"CS","catalog_number":"743","title":"Principles of Database Management and Use","units":0.5,"description":"An overview of relational databases and how they are used; exposure to relational database technology.  Fundamentals of transactions.  Database views. Introductions to two or three alternative data models and systems, such as those used for structured text, spatial data, multimedia data, and information retrieval.  Introduction to several current topics in database research, such as warehousing, data mining, managing data streams, data cleaning, data integration, and distributed databases.","academic_level":"graduate"},{"course_id":"000655","subject":"CS","catalog_number":"744","title":"Advanced Compiler Design","units":0.5,"description":"Project-oriented course that covers optimizing compilers and the implementation of advanced programming language features. Topics include intermediate representations; data-flow, dependence, and alias analysis; optimizing transforms, register allocation, instruction scheduling; memory management, garbage collection, threads, concurrency; single and multiple inheritance, generics, templates, type inference.","academic_level":"graduate"},{"course_id":"011295","subject":"CS","catalog_number":"745","title":"Computer-Aided Verification","units":0.5,"description":"Application of formal methods to the verification of computer-based systems. Algebraic and automata preliminaries. Temporal logic and model checking. Decision procedures. Mechanized theorem proving. Advanced topics chosen by the instructor.","academic_level":"graduate"},{"course_id":"000656","subject":"CS","catalog_number":"746","title":"Software Architecture","units":0.5,"description":"A project-oriented course that covers the concepts in software architecture. Topics include basic concepts (components and connectors, rationale, views, architectural diagrams, team implictions, evolution, size considerations), theory underlying softeware architecture, extraction of architecture from implementation artifacts, architecture of web-based and enterprise systems, clustering of subsystems, visualization approaches to software architecture, comprehension and cognitive aspects of software architecture.","academic_level":"graduate"},{"course_id":"013603","subject":"CS","catalog_number":"755","title":"System and Network Architectures and Implementation","units":0.5,"description":"Distributed, multi-user applications are designed and implemented using many underlying technologies that must be coordinated to provide important features such as robustness, scalability, manageability, ubiquitous access, privacy, security, authentication, and role-based access control, to name only a few.  The network supporting the application may be crucial to its successful implementation.  The application logic itself is likely implemented in a number of languages and programming environments.  Students will be provided with an advanced overview of current networking and distributed systems topics, and will apply it to case studies drawn form consumer internet applications, enterprise systems, and medical and healthcare systems.","academic_level":"graduate"},{"course_id":"011590","subject":"CS","catalog_number":"758","title":"Cryptography\/Network Security","units":0.5,"description":"Cryptographic protocols and their application to secure communication, especially in a network setting. Identification and entity authentication; protocols for key establishment, transport, agreement and maintenance; secret sharing, broadcast encryption, tracing schemes; certificates, public-key infrastructure, PGP.","academic_level":"graduate"},{"course_id":"011296","subject":"CS","catalog_number":"761","title":"Randomized Algorithms","units":0.5,"description":"Introduction to the design and analysis of algorithms that make use of randomization. Topics include review of basic probabiloity and introduction to randomized algorithms; game theoretic techniques; uses of Markov and Chebyshev inequalities; tail inequalities; Markov chains and random walks; algebraic techniques; data structures and graph algorithms.","academic_level":"graduate"},{"course_id":"000710","subject":"CS","catalog_number":"762","title":"Graph-Theoretic Algorithms","units":0.5,"description":"Further exposure to the design, analysis and application of algorithms for problems defined on graphs. Topics include planarity testing and embedding; classes of planar graphs and fast algorithms for them; trees and tree-like graphs (bounded pathwidth and treewidth);  perfect graphs and intersection graphs.","academic_level":"graduate"},{"course_id":"011297","subject":"CS","catalog_number":"763","title":"Computational Geometry","units":0.5,"description":"Introduction to the design, analysis and application of algorithms for geometric problems. Topics include convex hull algorithms in two and three dimensions; Voronoi diagrams, Delaunay triangulations, and their applications; linear programming in low dimensions; line segments, planar subdivision, and polygons; range searching.","academic_level":"graduate"},{"course_id":"011298","subject":"CS","catalog_number":"764","title":"Computational Complexity","units":0.5,"description":"Further exposure to the classification of problems based on their computational requirements and to mathematical tools designed to explore the structural consequences of such classifications. Topics include relativization, alternation, provably intractable problems, feasible parallel computation; fixed-parameter tractability and the W-hierarchy; Kolmogorov complexity, including algorithmic and algorithmic prefix complexity and their applications.","academic_level":"graduate"},{"course_id":"011299","subject":"CS","catalog_number":"765","title":"Algorithmic Number Theory","units":0.5,"description":"Fundamental problems of elementary and algebraic number theory from an algorithmic and computational complexity point of view with emphasis placed on analysis of algorithms. Topics include basic arithmetic algorithms; computation over finite fields; primality testing; algorithms for integer factorization; algorithms in number fields.","academic_level":"graduate"},{"course_id":"000711","subject":"CS","catalog_number":"766","title":"Theory of Quantum Information","units":0.5,"description":"Fundamentals of quantum information theory including states, measurements, operations, and their representations as matrices; measures of distance between quantum states and operations; quantum Shannon theory including von Neumann entropy, quantum noiseless coding, strong subadditivity of von Neuman entropy, Holevo's Theorem, and capabilities of quantum channels; theory of entanglement including measures of entanglement, entanglement transformation, and classifications of mixed-state entanglement; other topics in quantum information as time permits.","academic_level":"graduate"},{"course_id":"000712","subject":"CS","catalog_number":"767","title":"Advanced Logic for Computer Science","units":0.5,"description":"The course provides extended background in mathematical logic and its applications to various branches of computer science.  It covers some fundamental concepts such as soundness and completeness theorems, compactness, the expressive power of a logic and the computational complexity of its basic decision problems.  These concepts are being demonstrated on first order logic and modal logics.  Finally the course discusses examples of applications of these concepts and tools to formal reasoning about programs and about hardware, to data bases, and to knowledge representation.","academic_level":"graduate"},{"course_id":"011589","subject":"CS","catalog_number":"768","title":"Quantum Information Processing","units":0.5,"description":"Review of basics of quantum information and computational complexity; Simple quantum algorithms; Quantum Fourier transform and Shor factoring algorithm: Amplitude amplification, Grover search algorithm and its optimality; Completely positive trace-preserving maps and Kraus representation; Non-locality and communication complexity; Physical realizations of quantum computation: requirements and examples; Quantum error-correction, including CSS codes, and elements of fault-tolerant computation; Quantum cryptography; Security proofs of quantum key distribution protocols; Quantum proof systems.  Familiarity with theoretical computer science or quantum mechanics will also be an asset, though most students will not be familiar with both.","academic_level":"graduate"},{"course_id":"012670","subject":"CS","catalog_number":"770","title":"Numerical Analysis","units":0.5,"description":"Introduction to basic algorithms and techniques for numerical computing.  Error analysis, interpolation (including splines), numerical differentiation and integration, numerical linear algebra (including methods for linear systems, eigenvalue problems, and the singular value decomposition), root finding for nonlinear equations and systems, numerical ordinary differential equations, and approximation methods (including least squares, orthogonal polynomials, and Fourier transforms).","academic_level":"graduate"},{"course_id":"012994","subject":"CS","catalog_number":"774","title":"Advanced Computational Finance","units":0.5,"description":"Option pricing, hedging, model calibration, and portfolio optimization will be discussed.  Computational methods, including PDE methods, Monte Carlo, and mathematical programming will be presented.","academic_level":"graduate"},{"course_id":"011300","subject":"CS","catalog_number":"775","title":"Parallel Algorithm in Scientific Computing","units":0.5,"description":"Techniques for obtaining maximum parallelism in various numberical algorithms, especially those occurring when solving matrix problems and partial differential equations, and the subsequent mapping onto the computer. Topics include: parallel architecture and performance models; message passing\/shared memory programming; matrix computations; fast Fourier transform; graph partitioning; domain decomposition methods.","academic_level":"graduate"},{"course_id":"000724","subject":"CS","catalog_number":"778","title":"Numerical Solution of Partial Differential Equations","units":0.5,"description":"Discretization methods for partial differential equations, including finite difference, finite volume and finite element methods. Application to elliptic, hyperbolic and parabolic equations. Convergence and stability issues, properties of discrete equations, and treatment of non-linearities. Stiffness matrix assembly and use of sparse matric software. Students should have completed a course in numerical computation at the undergraduate level.","academic_level":"graduate"},{"course_id":"000725","subject":"CS","catalog_number":"779","title":"Splines and Their Use in Computer Graphics","units":0.5,"description":"Spline theory and recent developments in techniques for representing, manipulating and rendering curves and surfaces constructed from splines in a graphic environment. Applications of interest include computer-aided design, synthetic image generation and animation.","academic_level":"graduate"},{"course_id":"011501","subject":"CS","catalog_number":"780","title":"Advanced Symbolic Computation","units":0.5,"description":"A deep investigation into fundamental problems of symbolic computation. These may include algorithms for linear, non-linear, and differential systems of symbolic equations, symbolic integration, factoring polynomials, and symbolic-numeric algorithms. Covers the basic data types and structures for algebraic objects and operations. Issues in the design of computer algebra systems.","academic_level":"graduate"},{"course_id":"011467","subject":"CS","catalog_number":"781","title":"Colour in Computer Graphics","units":0.5,"description":"In computer graphics, 3D models are rendered through an ideal camera to a 2D image. The virtual camera is a powerful tool, controlling not only perspective and the optical path, but colour mapping as well. This course examines the notion of \"colour\" at different stages of the computer graphics pipeline, and describes techniques for modelling and managing colour through the virtual camera analogy. Topics include illumination, the virtual camera, colour spaces, gamut mapping and colour management. Implementation of the colour reproduction and gamut-mapping algorithms demands a number of numerical and statistical methods, including multidimensional interpolation and approximation, computational geometry, splines, principal components anlysis and optimization.","academic_level":"graduate"},{"course_id":"011468","subject":"CS","catalog_number":"782","title":"Pattern Discovery in Biomolecular Data","units":0.5,"description":"This course examines, from an algorithmic point of view, the pattern discovery techniques that are currently used to extract the functional knowledge hidden in biomolecular data that is derived from DNA, RNA, proteins and their reaction products. Topics include: DNA sequence analysis, RNA structure prediction techniques, protein motif discovery techniques, protein structure prediction, analysis of expression data.","academic_level":"graduate"},{"course_id":"012995","subject":"CS","catalog_number":"783","title":"Computer Modeling of Biophysical Phenomena","units":0.5,"description":"This course addresses the computer (in silico) simulation of biophysical processes involved in the interaction of light with organic and inorganic matter.  Computer models used to simulate these processes are presented, and key stages of the simulation pipeline, such as data gathering, design constraints and evaluation methodologies, are examined in detail.  This course also includes discussions of open problems and current trends in the computer simulation of biophysical processes.  Application fields include, but are not limited to computer graphics, remote sensing, biology and biomedical optics.","academic_level":"graduate"},{"course_id":"011288","subject":"CS","catalog_number":"784","title":"Computational Linguistics","units":0.5,"description":"Computer understanding and generation of natural (i.e., human) languages. Basic topics in natural language understanding (syntax, semantics, pragmatics, connected discourse). Selected applications (e.g., automated language generation, machine translation, natural language processing and the Web).","academic_level":"graduate"},{"course_id":"011289","subject":"CS","catalog_number":"785","title":"Intelligent Computer Interfaces","units":0.5,"description":"Intelligence in interfaces-natural language processing, plan recognition, dialogue, generation, user modeling. Interfaces to intelligent systems-intelligent agents and multi-agent systems, information processing and data mining, knowledge-based systems.","academic_level":"graduate"},{"course_id":"000726","subject":"CS","catalog_number":"786","title":"Probabilistic Inference and Machine Learning","units":0.5,"description":"Covers the fundamental principles of probabilistic inference and computational learning systems. Topics include Bayes decision and utility theory, Monte Carlo and Markov chain Monte Carlo methods; learning with complete data; Bayesian networks, Markov random fields and factor graphs; models; learning with incomplete data; computational learning and PAC learning theory.","academic_level":"graduate"},{"course_id":"000743","subject":"CS","catalog_number":"787","title":"Computational Vision","units":0.5,"description":"Fundamental problems in computational vision where efficient and robust algorithms can be applied. Topics include image formation; linear systems and Fourier theory; image registration; feature detection; fitting models to data; optical flow; structure from motion; steriopsis; object recognition; high-level vision.","academic_level":"graduate"},{"course_id":"000747","subject":"CS","catalog_number":"788","title":"High-Performance Image Synthesis","units":0.5,"description":"Project-oriented course that covers high-performance image synthesis using techniques for both real-time interactive systems and offline physically-based rendering. Topics include numerical techniques; visual perception and light; mathematical models of rendering; global illumination algorithms; real-time rendering.","academic_level":"graduate"},{"course_id":"011290","subject":"CS","catalog_number":"789","title":"User Interface Tools","units":0.5,"description":"Graphics input devices and interaction techniques. The pragmatic factors of various physical, logical and virtual devices, human factors of interactive systems, interaction dialogue managers.","academic_level":"graduate"},{"course_id":"012996","subject":"CS","catalog_number":"791","title":"Non-Photorealistic Rendering","units":0.5,"description":"Fundamentals of non-photorealistic computer depiction.  Problems of style, abstraction and spatial and temporal coherence.  Stroke-based rendering and simulation of traditional artistic media.  Stylized processing of images and video.  Real-time non-photorealistic rendering of 3D models;  toon shaders and contour rendering.  Geometric art and ornamental design.","academic_level":"graduate"},{"course_id":"013604","subject":"CS","catalog_number":"792","title":"Data Structures and Standards in Health Informatics","units":0.5,"description":"This course focuses on health data as a key component of all health informatics systems.  Topics include ontologies and other classification taxonomies found in health systems, data standards (with a focus on Canadian implementations of international standards), privacy and security of health data, client\/patient assessment tools, and ethical considerations.","academic_level":"graduate"},{"course_id":"013605","subject":"CS","catalog_number":"793","title":"Health Informatics  - Applications Domains","units":0.5,"description":"System architectures, interoperability, networking, and medical data storage are explored in the context of health information system applications such as digital image acquisition systems, telemedicine, laboratory automation, physician order entry systems, patient safety systems, administrative systems, and various forms of the electronic patient record.  Issues related to usability and human computer interaction feature prominently in this course.","academic_level":"graduate"},{"course_id":"000753","subject":"CS","catalog_number":"798","title":"Advanced Research Topics","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011084","subject":"CS","catalog_number":"840","title":"Advanced Topics in Data Structures","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011085","subject":"CS","catalog_number":"842","title":"Advanced Topics in Language Design and Implementation","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011086","subject":"CS","catalog_number":"846","title":"Advanced Topics in Software Engineering","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011087","subject":"CS","catalog_number":"848","title":"Advanced Topics in Data Bases","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011088","subject":"CS","catalog_number":"850","title":"Advanced Topics  in Computer Architecture","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011089","subject":"CS","catalog_number":"854","title":"Advanced Topics in Computer Systems","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011090","subject":"CS","catalog_number":"856","title":"Advanced Topics  in Distributed Computing","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"012992","subject":"CS","catalog_number":"858","title":"Advanced Topics in Cryptography, Security and Privacy","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011091","subject":"CS","catalog_number":"860","title":"Advanced Topics in Algorithms and Complexity","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"013470","subject":"CS","catalog_number":"867","title":"Advanced Topics in Quantum Computing","units":0.5,"description":"The course description will vary according to the topic offered under this course title.","academic_level":"graduate"},{"course_id":"011092","subject":"CS","catalog_number":"869","title":"Advanced Topics in Logic Design","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011093","subject":"CS","catalog_number":"870","title":"Advanced Topics  in Scientific Computation","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011304","subject":"CS","catalog_number":"882","title":"Advanced Topics in Bioinformatics","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011094","subject":"CS","catalog_number":"886","title":"Advanced Topics in Artificial Intelligence","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011095","subject":"CS","catalog_number":"887","title":"Advanced Topics in Symbolic Computation","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011096","subject":"CS","catalog_number":"888","title":"Advanced Topics in Computer Graphics","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"012993","subject":"CS","catalog_number":"889","title":"Advanced Topics in Human-Computer Interaction","units":0.5,"description":"","academic_level":"graduate"},{"course_id":"011301","subject":"CS","catalog_number":"898","title":"Advanced Special Topics in Computer Science","units":0.5,"description":"","academic_level":"graduate"}]
